package ru.job4j.bank;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Класс описывает модель банковской системы.
 * В системе можно производить следующие действия:
 * 1. Регистрировать пользователя.
 * 2. Удалять пользователя из системы.
 * 3. Добавлять пользователю банковский счет. У пользователя системы могут быть несколько счетов.
 * 4. Переводить деньги с одного банковского счета на другой счет.
 */
public class BankService {
    /**
     * Хранение перечня всех пользователей банковской системы с привязанными к ним банковскими счетами
     * осуществляется в коллекции(карте) типа HashMap
     */
    private final Map<User, List<Account>> users = new HashMap<>();

    /**
     * Метод добавляет пользователя в систему(карту). Метод принимает на входе пользователя, проверяет его наличие
     * в системе(карте) и если не находит, то добавляет нового пользователя в систему(карту)
     * @param user пользователь, который проверяется на наличие в системе(карте) и добавляется в неё, если его нет
     */
    public void addUser(User user) {
        users.putIfAbsent(user, new ArrayList<>());
    }

    /**
     * Метод удаляет пользователя из системы(карты). Метод принимает на входе номер паспорта пользователя,
     * проверяет, найден ли такой пользователь, и если да, то удаляет пользователя из системы(карты)
     * @param passport номер паспорта пользователя, по которому осуществляется поиск пользователя
     * @return возвращает true, если пользователь найден и удален, false - если пользователь не найден
     */
    public boolean deleteUser(String passport) {
        return users.remove(new User(passport, "")) != null;
    }

    /**
     * Метод добавляет банковский счет в систему(карту). Метод принимает на входе два параметра - номер паспорта
     * пользователя и его банковский счет. Метод проверяет, добавлен ли пользователь с таким номером паспорта в
     * систему(карту) и если добавлен, то проверяет, добавлен ли в систему(карту) такой банковский счет.
     * Если пользователь в систему(карту) добавлен, а счет нет, то метод добавляет такому пользователю новый счет
     * в систему(карту).
     * @param passport номер паспорта пользователя, которому требуется добавить банковский счет
     * @param account банковский счет пользователя, который требуется добавить в систему(карту)
     */
    public void addAccount(String passport, Account account) {
        User user = findByPassport(passport);
        if (user != null && !users.get(user).contains(account)) {
            users.get(user).add(account);
        }
    }

    /**
     * Метод ищет пользователя по номеру его паспорта. Метод принимает на входе номер паспорта и проверяет,
     * добавлен ли ранее пользователь с таким номером паспорта в систему(карту) и если добавлен, то возвращает
     * пользователя из карты
     * @param passport номер паспорта, по которому осуществляется поиск пользователя в системе(карте)
     * @return вовзращает пользователя из карты, если он найден
     */
    public User findByPassport(String passport) {
        User rsl = null;
        for (User key : users.keySet()) {
            if (key.getPassport().equals(passport)) {
                rsl = key;
                break;
            }
        }
        return rsl;
    }

    /**
     * Метод ищет банковский счет пользователя по банковским реквизитам. Принимает на входе два параметра -
     * номер паспорта и банковские реквизиты. Метод проверяет, добавлен ли пользователь в систему(карту)
     * по такому номеру паспорта и если да, то проверяет, добавлены ли такие банковские
     * реквизиты в систему(карту) и если да, то возвращает банковский счёт пользователя из карты.
     * @param passport номера паспорта, по которому осуществляется поиск пользователя в системе(карте)
     * @param requisite номер бановских реквизитов пользователя, по которым осуществляется поиск банковского счета
     * пользователя в системе(карте)
     * @return возрващает банковский счет пользователя из карты, если он найден
     */
    public Account findByRequisite(String passport, String requisite) {
        Account rsl = null;
        User user = findByPassport(passport);
        if (user != null) {
            for (Account account : users.get(user)) {
                if (account.getRequisite().equals(requisite)) {
                    rsl = account;
                    break;
                }
            }
        }
        return rsl;
    }

    /**
     * Метод предназначен для перечисления денежных средств с одного банковсеого счёта на другой. Метод принимает на
     * входе пять параметров - счёт / номер паспорта, с которых переводятся денежные средства, счет / номер паспорта,
     * на которые переводятся денежные средства и величина денежных средств для перечисления. По номерам банковских
     * реквизитов и паспортов метод проверяет наличие банковских счетов в системе(карте), по которым осуществляется
     * транзакция денежных средств. Если такие счета найдены, метод перечисляет денежные средства с одного счета
     * на другой при условии, что баланс на счёте, с которого списываются денежные средства, больше или равен балансу на
     * счёте, на который осуществляется перевод
     * @param srcPassport номер паспорта пользователя, со счёта которого переносятся денежные средства
     * @param srcRequisite номер банковских реквизитов счёта, с которого переносятся денежные средства
     * @param destPassport номер паспорта пользователя, на счёт которого переносятся денежные средства
     * @param destRequisite номер банковских реквизитов счёта, на который переносятся денежные средства
     * @param amount величина денежных средств для переноса с одного счёта на другой
     * @return возвращает true, если денежные средства перечислены с одного счёта на другой, false - если такая операция
     * не может быть выполнена
     */
    public boolean transferMoney(String srcPassport, String srcRequisite,
                                 String destPassport, String destRequisite, double amount) {
        boolean rsl = false;
        Account srcAccount = findByRequisite(srcPassport, srcRequisite);
        Account destAccount = findByRequisite(destPassport, destRequisite);
        if (srcAccount != null
                && destAccount != null
                && srcAccount.getBalance() >= amount) {
            srcAccount.setBalance(srcAccount.getBalance() - amount);
            destAccount.setBalance(destAccount.getBalance() + amount);
            rsl = true;
        }
        return rsl;
    }

    /**
     * Метод для получения списка всех банковских счетов пользователя. Метод принимает на входе пользователя
     * и по его параметрам возвращает из карты список банковских счетов.
     * @param user пользователь, у которого нужно проверить список банковских счетов
     * @return возвращает из карты список всех банковских счетов конкретного пользователя
     */
    public List<Account> getAccounts(User user) {
        return users.get(user);
    }

}
